---BASIC SQL Fundamentals---
SELECT Statement is the most basic Statement
SELECT 'column_name' FROM 'table_name'
eg SELECT C1, C2 FROM 'table_name'
eg SELECT * FROM 'table_name'
***it is not a good practice to use a (*)

---Challenge One: SELECT---
Answer: SELECT first_name, last_name, email FROM customer;
----Challenge One End---

SELECT DISTINCT(column)FROM table_name
***()doesn't need to be added. It is for clarity

---Challenge Two: DISTINCT---
Answer: SELECT DISTINCT (rating) FROM film;
----Challenge Two End---

COUNT() function returns the number of input rows that match a specific condition
We can apply COUNT(colum_name) on a specific column or COUNT(*)
SELECT COUNT (DISTINCT name) FROM table

WHERE statement allows us to specify conditions
AND, OR, NOT are the logical operators

---Challenge Three: WHERE---
1: SELECT email FROM customer
    WHERE first_name = 'Nancy' 
    AND last_name = 'Thomas';

2: SELECT description FROM film
    WHERE title = 'Outlaw Hanky';

3: SELECT * FROM address
    WHERE address = '259 Ipoh Drive'
---Challenge Three End---

ORDER BY is towards the end of a query. We want to do any selections first before sorting
SELECT column_1, column_2
FROM table
ORDER BY column_1 ASC/DESC
***ORDER BY uses ASC by default
eg SELECT store_id, first_name, last_name FROM customer
    ORDER BY store_id DESC, first_name ASC;

LIMIT command allows us to limit the number of rows returned for a query.
LIMIT goes at the very end of a query request and is the last command to be executed

---Challenge Four: ORDER BY and LIMIT---
1: SELECT customer_id FROM payment
ORDER BY payment_date 
LIMIT 10

2: SELECT title, length FROM film
ORDER BY length
LIMIT 5

3: SELECT title FROM film
ORDER BY length
LIMIT 5

4: SELECT COUNT(*) FROM film
WHERE length <= 50
---Challenge Four End---

IN operator
eg SELECT * FROM payment
WHERE amount IN (0.99)
eg SELECT COUNT(*) FROM payment
WHERE amount NOT IN (0.99, 1.98, 1.99)

LIKE and ILIKE
Wildcard characters 
A%:
All name that begin with an 'A'
***LIKE is case sensative
***ILIKE is case insensative
eg WHERE name LIKE '_her%'
it would search for any one letter before her and unlimited after her.
To the reverse you can use NOT LIKE

---Challenge FIVE: General Challenge---
1: SELECT COUNT(*) FROM payment
WHERE amount > 5.00;

2: SELECT COUNT(*) FROM actor
WHERE first_name ILIKE 'P%';

3: SELECT COUNT(DISTINCT(district)) 
FROM address;

4: SELECT DISTINCT(district)
FROM address;

5: SELECT COUNT(*) FROM film
WHERE rating = 'R'
AND replacement_cost BETWEEN 5 AND 15 ;

6: SELECT COUNT(*) FROM film
WHERE title iLIKE '%Truman%'
--Challenge Five End---

---SECTION 3: GROUP BY---

Aggregate function is to take multiple inputs and return a single ouput.
Some examples are: 
-AVG()
eg SELECT ROUND(AVG(replacement_cost), 2)
    FROM film;
-COUNT()
-MAX()
-SUM()
-MIN()
***Aggregate function only happens in the SELECT clause or HAVING clause

GROUP BY allows us to aggregate columns per some category 
SELECT category_col, AGG(data_col)
FROM table
GROUP BY category_col
***GROUP BY needs to come after a FROM or WHERE statement
eg SELECT company, division, SUM(sales)
FROM finance_table
GROUP BY company, division
***IN THE SELECT STATEMENT, COLUMNS MUST HAVE A AGGREGATE FUNCTION OR BE IN THE GROUP BY CLAUSE.
***If there is a WHERE statement as well as GROUP BY statement, the WHERE statement should not 
refer to the aggregation result. 
eg SELECT company, SUM(sales)
FROM finance_table
GROUP BY company
ORDER BY SUM(sales) <-- ORDER BY refered to the aggregate 

---Challenge SIX: GROUP BY---
1: SELECT staff_id, COUNT(amount)
FROM payment
GROUP BY staff_id

2:SELECT rating, ROUND(AVG(replacement_cost), 2) 
FROM film
GROUP BY rating
ORDER BY rating DESC

3: SELECT customer_id, SUM(amount) 
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5
---Challenge Six End---

***WE CAN NOT USE WHERE TO FILTER BASED OFF AGGREGATE RESULTS, THIS IS BECAUSE
WHERE IS EXECUTED BEFORE

HAVING allows us to use the aggregate result as a filter along with a GROUP BY statement
eg SELECT company, SUM(sales)
FROM finance_table
WHERE company != 'Google'
GROUP BY company
HAVING SUM(sales) > 1000

---Challenge SIX: HAVING---
1: SELECT customer_id, COUNT(payment)
FROM payment
GROUP BY customer_id
HAVING COUNT(payment) >= 40
ORDER BY COUNT(payment) DESC

2: SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100
---Challenge SIX END---

---ASSESSEMENT TEST 1---
1: SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING sum(amount) >= 110

2: SELECT COUNT(title)
FROM film
WHERE title ILIKE 'J%'

3: SELECT * FROM customer
WHERE first_name ILIKE 'E%'
AND address_id < 500
ORDER BY customer_id DESC
LIMIT 1
---ASSESSEMENT TEST 1 END---

---SECTION FIVE JOINS---
AS operator allows you to give a alias
The AS operator gets executed at the very end of the query. This means we can not use
the ALIAS inside w WHERE operator

INNER JOIN will result with the set of records that match in  both tables
SELECT * FROM tableA
INNER JOIN tableB
ON talbeA.col_match = tableB.col_match
***If you just type JOIN it defaults to INNER JOIN

FULL OUTER JOINS just grabs everything
SELECT * FROM tableA
FULL OUTER JOIN tableB
ON tableA.col_match = tableB.col_match
***If there is no match between the tables, it fills it with NULL

LEFT (OUTER ) JOIN
A LEFT OUTER JOIN results in the set of records that are in the left table,
if there are no match with the right table, the results are null.
SELECT * FROM tableA (this is the left table. ORDER MATTER)
LEFT JOIN tableB
ON tableA.col_match = tableB.col_match
***It grabs anything that is in tableA and also tableA+tableB but not 
exclusive table B

RIGHT (OUTER) JOIN 
A right join is essentially the same as a LEFT JOIN, except the tables are
switched (you can still use a LEFT JOIN)

UNION operator is used to combine the result set of two or more SELECT
statements. It serves to directly concatenate two results together (pasting them together)
SELECT column_name FROM table1
UNION 
SELECT column_name FROM table2

---Challenge SEVEN: jOINS---
1: SELECT * FROM address
INNER JOIN customer
ON address.address_id = customer.address_id
WHERE district = 'California'

SELECT a.district, c.email FROM customer AS c
LEFT JOIN address a ON c.address_id = a.address_id
WHERE a.district = 'California'

2:SELECT film.title, actor.first_name, actor.last_name FROM film
INNER JOIN film_actor ON film.film_id = film_actor.film_id
INNER JOIN actor ON film_actor.actor_id = actor.actor_id
WHERE actor.actor_id = 2
---Challenge Seven End---